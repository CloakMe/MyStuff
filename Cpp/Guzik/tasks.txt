1 ------------------------------------------------------------------------- 
Write a program, which reverses the order of bits in a 32-bit integer number.
I.e. swaps bit 0 and bit 31, bit 1 and bit 30, ... bit 15 and bit 16.


2 ---------------------------------------------------------------------------
There is a long sequence of bits. Initially all bits are set to 0.
- On the 1-st step each bit (1,2,3, ...) is inverted
- On the 2-nd step each 2nd bit (2,4,6, ...) is inverted
- On the 3-nd step each 3rd bit (3,6,9, ...) is inverted
        and so on.
It is easy to see that no matter how long the sequence is, the value of 
n-th bit will remain stable after the n-th step.
What will this stable value of the n-th bit be?


3 ---------------------------------------------------------------------------
A Printed Circuit Board (PCB) has N contact points. It is known that
the Ground net (points connected to the electrical ground) has more then
N/2 contact points. Measurement device (beeper) can detect if two points
are connected or not. The goal is to find at least one contact point
which belongs to the Ground net. Invent the algorithm, which will do it as fast
as possible. Calculate the worse case amount of measurements.
The proof that designed algorithm is the most effective is required.


4 ------------------------------------------------------------------------- 
You have to present an idea of hardware implementation of the algorithm
looking for the maximum value in a sequence of data values. You need not to
deliver complete design, just a general idea. I'll try to explain the means
you have at your disposal. Please ask if something is unclear.

- input data are arriving at a fixed clock rate, at each clock a new data
item is ready as the value of the input signal X.
- you can combine in your schematic any amount of following:
a) combinatorial logic - AND, OR and NOT elements. It is supposed that
combinatorial logic has no delays.
b) mutiplexers - a multiplexer (MUX) can select one from two input
multi-bit values depending on the value of additional input - the selector
bit. It is supposed that a multiplexer has no delays.
c) registers - a register (REG) can store its multi-bit input value so that
it will be on the register output at the next clock. You can suppose that
all registers have zero values when your schematics is reset and the first
data item arrives.
c) comparators - a comparator (CMP) can compare two input values A and B
and output 1 if (A<B) or 0 otherwise. IMPORTANT: The output of a comparator 
must be connected directly to the input of a register and no computation 
with comparator output can be performed on the same clock.

For instance, the schematics which detects whether there is a value in the
input data sequence greater than a given constant C may look as follows


C   -----    -----
--->|   |    |   |       ----
    |CMP|--->|REG|------>|  |
X   |   |    |   |       |OR|----
--->|   |    -----    -->|  |   |
    -----             |  ----   |
                      |         |
             -----    |         |
             |   |    |  output |
         --->|REG|-----------   |
         |   |   |              |
         |   -----              |
         |                      |
         ------------------------

Or, in some hardware definition pseudo-language

reg A, B;

assign output = B;

always
begin
   A <= (C < X);
   B <= (A | B);
end


5 ------------------------------------------------------------------------- 

Present an implementation of a Queue (FIFO) object (with Put, Get and
IsEmpty methods) using two Stack (LIFO) objects to store the Queue contents.
A Stack object has Push, Pop and IsEmpty methods.
